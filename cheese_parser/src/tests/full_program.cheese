fn abs(arg: f64) -> f64 => if (arg < 0) -arg else arg;

struct HSL {
    public h: f64,
    public s: f64,
    public l: f64,
};

impl HSL {
    constructor new(self, h: f64, s: f64, l: f64) {
        self.h = h;
        self.s = s;
        self.l = l;
    }

    public fn to_rgb(~self) -> RGB {
        let c = (1.0 - abs(2.0 * self.l - 1.0)) * self.s;
        let x = c * (1.0 - abs((self.h / 60.0) % 2.0 - 1.0));
        let m = self.l - c/2.0;
        let h60 = (self.h / 60.0) @ u8;
        let (rprime, gprime, bprime) = match (h60)
        {
            0 =>
                (c,x,0.0),
            1 =>
                (x,c,0.0),
            2 =>
                (0.0,x,c),
            3 =>
                (x,0.0,c),
            4 =>
                (c,0.0,x),
            _ =>
                (0.0,0.0,0.0),
        };
        .{
            r: ((rprime+m)*255)@u8,
            g: ((gprime+m)*255)@u8,
            b: ((bprime+m)*255)@u8,
        }
    }
}

struct RGB {
    public r: u8,
    public g: u8,
    public b: u8,
};

entry fn main() -> u8 {
    let hsl = HSL(130.0, 0.5, 0.5);

    puts("HSL(130,0.5,0.5) -> RGB = ");

    let rgb = hsl.to_rgb();

    puts("R: ");
    put_int(rgb.r);
    puts(", G: ");
    put_int(rgb.g);
    puts(", B: ");
    put_int(rgb.b);
    _ = putchar('\n');
    0
}




fn put_int(i: u64) -> void
{
    def mut chars: [21]u8;
    _ = puts(_ui64toa(i, chars,10));
}

fn puts(s: [?]~u8) -> void
{
    let mut i: u64 = 0;
    while (s[i] != 0)
    {
        _ = putchar(s[i]);
        i += 1;
    }
}

public import fn putchar(c: u8) -> i32;
public import fn atoi(s: [?]~u8) -> i32;
public import fn _ui64toa(value: u64, buffer: [?]u8, radix: i32) -> [?]~u8;